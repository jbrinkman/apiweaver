package com.apiweaver;

import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.DisplayName;
import static org.junit.jupiter.api.Assertions.*;

@DisplayName("OpenApiSpec Tests")
class OpenApiSpecTest {

    @Test
    @DisplayName("Should create OpenApiSpec with default values")
    void shouldCreateOpenApiSpecWithDefaults() {
        OpenApiSpec spec = new OpenApiSpec();

        assertEquals("3.1.1", spec.getOpenapi());
        assertNotNull(spec.getInfo());
        assertNotNull(spec.getComponents());
        assertTrue(spec.getComponents().isEmpty());
    }

    @Test
    @DisplayName("Should allow setting OpenAPI version")
    void shouldAllowSettingOpenApiVersion() {
        OpenApiSpec spec = new OpenApiSpec();
        spec.setOpenapi("3.0.3");

        assertEquals("3.0.3", spec.getOpenapi());
    }

    @Test
    @DisplayName("Should allow setting custom info")
    void shouldAllowSettingCustomInfo() {
        OpenApiSpec spec = new OpenApiSpec();
        OpenApiSpec.Info customInfo = new OpenApiSpec.Info();
        customInfo.setTitle("Custom API");
        customInfo.setVersion("2.0.0");
        customInfo.setDescription("Custom description");

        spec.setInfo(customInfo);

        assertEquals("Custom API", spec.getInfo().getTitle());
        assertEquals("2.0.0", spec.getInfo().getVersion());
        assertEquals("Custom description", spec.getInfo().getDescription());
    }

    @Test
    @DisplayName("Should add schema to components")
    void shouldAddSchemaToComponents() {
        OpenApiSpec spec = new OpenApiSpec();
        OpenApiSpec.Schema schema = new OpenApiSpec.Schema();
        schema.setType("object");
        schema.setDescription("Test schema");

        spec.addSchema("TestSchema", schema);

        assertEquals(1, spec.getComponents().size());
        assertTrue(spec.getComponents().containsKey("TestSchema"));
        assertEquals(schema, spec.getComponents().get("TestSchema"));
    }

    @Test
    @DisplayName("Should handle null components by creating new map")
    void shouldHandleNullComponentsByCreatingNewMap() {
        OpenApiSpec spec = new OpenApiSpec();
        spec.setComponents(null);

        assertNotNull(spec.getComponents());
        assertTrue(spec.getComponents().isEmpty());
    }

    @Test
    @DisplayName("Should create components map when null during addSchema")
    void shouldCreateComponentsMapWhenNullDuringAddSchema() {
        OpenApiSpec spec = new OpenApiSpec();
        spec.setComponents(null);
        
        OpenApiSpec.Schema schema = new OpenApiSpec.Schema();
        spec.addSchema("TestSchema", schema);

        assertNotNull(spec.getComponents());
        assertEquals(1, spec.getComponents().size());
    }

    @Test
    @DisplayName("Should implement equals correctly")
    void shouldImplementEqualsCorrectly() {
        OpenApiSpec spec1 = new OpenApiSpec();
        spec1.getInfo().setTitle("Test API");
        
        OpenApiSpec spec2 = new OpenApiSpec();
        spec2.getInfo().setTitle("Test API");
        
        OpenApiSpec spec3 = new OpenApiSpec();
        spec3.getInfo().setTitle("Different API");

        assertEquals(spec1, spec2);
        assertNotEquals(spec1, spec3);
        assertNotEquals(spec1, null);
        assertNotEquals(spec1, "not an OpenApiSpec");
    }

    @Test
    @DisplayName("Should implement hashCode correctly")
    void shouldImplementHashCodeCorrectly() {
        OpenApiSpec spec1 = new OpenApiSpec();
        spec1.getInfo().setTitle("Test API");
        
        OpenApiSpec spec2 = new OpenApiSpec();
        spec2.getInfo().setTitle("Test API");

        assertEquals(spec1.hashCode(), spec2.hashCode());
    }

    @Test
    @DisplayName("Should implement toString correctly")
    void shouldImplementToStringCorrectly() {
        OpenApiSpec spec = new OpenApiSpec();
        spec.getInfo().setTitle("Test API");

        String toString = spec.toString();
        assertTrue(toString.contains("3.1.1"));
        assertTrue(toString.contains("OpenApiSpec"));
        // Note: The toString may not contain the nested Info title directly
    }

    @DisplayName("Info Tests")
    static class InfoTest {

        @Test
        @DisplayName("Should create Info with default values")
        void shouldCreateInfoWithDefaults() {
            OpenApiSpec.Info info = new OpenApiSpec.Info();

            assertEquals("Generated API", info.getTitle());
            assertEquals("1.0.0", info.getVersion());
            assertEquals("API specification generated by ApiWeaver", info.getDescription());
        }

        @Test
        @DisplayName("Should allow setting all properties")
        void shouldAllowSettingAllProperties() {
            OpenApiSpec.Info info = new OpenApiSpec.Info();
            info.setTitle("Custom Title");
            info.setVersion("2.1.0");
            info.setDescription("Custom description");

            assertEquals("Custom Title", info.getTitle());
            assertEquals("2.1.0", info.getVersion());
            assertEquals("Custom description", info.getDescription());
        }

        @Test
        @DisplayName("Should implement equals correctly")
        void shouldImplementEqualsCorrectly() {
            OpenApiSpec.Info info1 = new OpenApiSpec.Info();
            info1.setTitle("Test");
            info1.setVersion("1.0.0");
            info1.setDescription("Test desc");

            OpenApiSpec.Info info2 = new OpenApiSpec.Info();
            info2.setTitle("Test");
            info2.setVersion("1.0.0");
            info2.setDescription("Test desc");

            OpenApiSpec.Info info3 = new OpenApiSpec.Info();
            info3.setTitle("Different");
            info3.setVersion("1.0.0");
            info3.setDescription("Test desc");

            assertEquals(info1, info2);
            assertNotEquals(info1, info3);
            assertNotEquals(info1, null);
            assertNotEquals(info1, "not an Info");
        }

        @Test
        @DisplayName("Should implement hashCode correctly")
        void shouldImplementHashCodeCorrectly() {
            OpenApiSpec.Info info1 = new OpenApiSpec.Info();
            info1.setTitle("Test");
            
            OpenApiSpec.Info info2 = new OpenApiSpec.Info();
            info2.setTitle("Test");

            assertEquals(info1.hashCode(), info2.hashCode());
        }
    }

    @DisplayName("Schema Tests")
    static class SchemaTest {

        @Test
        @DisplayName("Should create Schema with default values")
        void shouldCreateSchemaWithDefaults() {
            OpenApiSpec.Schema schema = new OpenApiSpec.Schema();

            assertNull(schema.getType());
            assertNull(schema.getDescription());
            assertNotNull(schema.getProperties());
            assertTrue(schema.getProperties().isEmpty());
        }

        @Test
        @DisplayName("Should allow setting all properties")
        void shouldAllowSettingAllProperties() {
            OpenApiSpec.Schema schema = new OpenApiSpec.Schema();
            schema.setType("object");
            schema.setDescription("Test schema");

            assertEquals("object", schema.getType());
            assertEquals("Test schema", schema.getDescription());
        }

        @Test
        @DisplayName("Should add property to schema")
        void shouldAddPropertyToSchema() {
            OpenApiSpec.Schema schema = new OpenApiSpec.Schema();
            schema.addProperty("testProp", "string");

            assertEquals(1, schema.getProperties().size());
            assertTrue(schema.getProperties().containsKey("testProp"));
            assertEquals("string", schema.getProperties().get("testProp"));
        }

        @Test
        @DisplayName("Should handle null properties by creating new map")
        void shouldHandleNullPropertiesByCreatingNewMap() {
            OpenApiSpec.Schema schema = new OpenApiSpec.Schema();
            schema.setProperties(null);

            assertNotNull(schema.getProperties());
            assertTrue(schema.getProperties().isEmpty());
        }

        @Test
        @DisplayName("Should create properties map when null during addProperty")
        void shouldCreatePropertiesMapWhenNullDuringAddProperty() {
            OpenApiSpec.Schema schema = new OpenApiSpec.Schema();
            schema.setProperties(null);
            
            schema.addProperty("testProp", "string");

            assertNotNull(schema.getProperties());
            assertEquals(1, schema.getProperties().size());
        }

        @Test
        @DisplayName("Should implement equals correctly")
        void shouldImplementEqualsCorrectly() {
            OpenApiSpec.Schema schema1 = new OpenApiSpec.Schema();
            schema1.setType("object");
            schema1.setDescription("Test");
            schema1.addProperty("prop1", "string");

            OpenApiSpec.Schema schema2 = new OpenApiSpec.Schema();
            schema2.setType("object");
            schema2.setDescription("Test");
            schema2.addProperty("prop1", "string");

            OpenApiSpec.Schema schema3 = new OpenApiSpec.Schema();
            schema3.setType("array");
            schema3.setDescription("Test");
            schema3.addProperty("prop1", "string");

            assertEquals(schema1, schema2);
            assertNotEquals(schema1, schema3);
            assertNotEquals(schema1, null);
            assertNotEquals(schema1, "not a Schema");
        }

        @Test
        @DisplayName("Should implement hashCode correctly")
        void shouldImplementHashCodeCorrectly() {
            OpenApiSpec.Schema schema1 = new OpenApiSpec.Schema();
            schema1.setType("object");
            
            OpenApiSpec.Schema schema2 = new OpenApiSpec.Schema();
            schema2.setType("object");

            assertEquals(schema1.hashCode(), schema2.hashCode());
        }
    }
}