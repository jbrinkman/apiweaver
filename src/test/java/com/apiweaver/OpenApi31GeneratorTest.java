package com.apiweaver;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.io.TempDir;

import java.io.File;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.util.Arrays;
import java.util.List;
import java.util.Map;

import static org.junit.jupiter.api.Assertions.*;

/**
 * Unit tests for OpenApi31Generator class.
 * Tests schema generation, file loading, and merging functionality.
 */
class OpenApi31GeneratorTest {

    private OpenApi31Generator generator;

    @TempDir
    Path tempDir;

    @BeforeEach
    void setUp() {
        generator = new OpenApi31Generator();
    }

    @Test
    void testCreateNewSpec() {
        OpenApiSpec spec = generator.createNewSpec();

        assertNotNull(spec);
        assertEquals("3.1.1", spec.getOpenapi());
        assertNotNull(spec.getInfo());
        assertEquals("Generated API", spec.getInfo().getTitle());
        assertEquals("1.0.0", spec.getInfo().getVersion());
        assertEquals("API specification generated by ApiWeaver", spec.getInfo().getDescription());
        assertNotNull(spec.getComponents());
        assertTrue(spec.getComponents().isEmpty());
    }

    @Test
    void testGenerateOrAmendSpecWithNewSpec() {
        List<OpenApiProperty> properties = Arrays.asList(
            OpenApiProperty.builder("id", "integer")
                .required(true)
                .description("Unique identifier")
                .build(),
            OpenApiProperty.builder("name", "string")
                .required(true)
                .description("Object name")
                .build(),
            OpenApiProperty.builder("email", "string")
                .format("email")
                .description("Email address")
                .build(),
            OpenApiProperty.builder("createdAt", "string")
                .format("date-time")
                .readOnly(true)
                .description("Creation timestamp")
                .build()
        );

        OpenApiSpec spec = generator.generateOrAmendSpec(properties, null);

        assertNotNull(spec);
        assertEquals("3.1.1", spec.getOpenapi());
        assertNotNull(spec.getComponents());
        assertTrue(spec.getComponents().containsKey("GeneratedObject"));

        OpenApiSpec.Schema schema = spec.getComponents().get("GeneratedObject");
        assertEquals("object", schema.getType());
        assertNotNull(schema.getProperties());
        assertEquals(4, schema.getProperties().size());

        // Check individual properties
        @SuppressWarnings("unchecked")
        Map<String, Object> idProperty = (Map<String, Object>) schema.getProperties().get("id");
        assertEquals("integer", idProperty.get("type"));
        assertEquals("Unique identifier", idProperty.get("description"));

        @SuppressWarnings("unchecked")
        Map<String, Object> emailProperty = (Map<String, Object>) schema.getProperties().get("email");
        assertEquals("string", emailProperty.get("type"));
        assertEquals("email", emailProperty.get("format"));

        @SuppressWarnings("unchecked")
        Map<String, Object> createdAtProperty = (Map<String, Object>) schema.getProperties().get("createdAt");
        assertEquals("string", createdAtProperty.get("type"));
        assertEquals("date-time", createdAtProperty.get("format"));
        assertEquals(true, createdAtProperty.get("readOnly"));

        // Check required properties
        List<String> required = schema.getRequired();
        assertNotNull(required);
        assertEquals(2, required.size());
        assertTrue(required.contains("id"));
        assertTrue(required.contains("name"));
    }

    @Test
    void testGenerateOrAmendSpecWithExistingSpec() {
        // Create an existing spec
        OpenApiSpec existingSpec = generator.createNewSpec();
        existingSpec.getInfo().setTitle("Existing API");
        existingSpec.getInfo().setVersion("2.0.0");

        // Add a schema to the existing spec
        OpenApiSpec.Schema existingSchema = new OpenApiSpec.Schema();
        existingSchema.setType("object");
        existingSchema.addProperty("existingProp", Map.of("type", "string"));
        existingSpec.addSchema("ExistingObject", existingSchema);

        // Create new properties
        List<OpenApiProperty> newProperties = Arrays.asList(
            OpenApiProperty.builder("newProp", "integer")
                .required(true)
                .build()
        );

        OpenApiSpec amendedSpec = generator.generateOrAmendSpec(newProperties, existingSpec);

        assertNotNull(amendedSpec);
        assertEquals("Existing API", amendedSpec.getInfo().getTitle());
        assertEquals("2.0.0", amendedSpec.getInfo().getVersion());
        
        // Should have both existing and new schemas
        assertEquals(2, amendedSpec.getComponents().size());
        assertTrue(amendedSpec.getComponents().containsKey("ExistingObject"));
        assertTrue(amendedSpec.getComponents().containsKey("GeneratedObject"));
    }

    @Test
    void testWriteAndLoadSpecFile() throws IOException {
        // Create a spec with properties
        List<OpenApiProperty> properties = Arrays.asList(
            OpenApiProperty.builder("testProp", "string")
                .required(true)
                .description("Test property")
                .build()
        );

        OpenApiSpec originalSpec = generator.generateOrAmendSpec(properties, null);
        originalSpec.getInfo().setTitle("Test API");

        // Write to file
        Path specFile = tempDir.resolve("test-spec.yaml");
        generator.writeSpecToFile(originalSpec, specFile.toString());

        assertTrue(Files.exists(specFile));

        // Load from file
        OpenApiSpec loadedSpec = generator.loadExistingSpec(specFile.toString());

        assertNotNull(loadedSpec);
        assertEquals("3.1.1", loadedSpec.getOpenapi());
        assertEquals("Test API", loadedSpec.getInfo().getTitle());
        assertTrue(loadedSpec.getComponents().containsKey("GeneratedObject"));
    }

    @Test
    void testLoadExistingSpecFileNotFound() {
        String nonExistentFile = tempDir.resolve("nonexistent.yaml").toString();

        IOException exception = assertThrows(IOException.class, () -> {
            generator.loadExistingSpec(nonExistentFile);
        });

        assertTrue(exception.getMessage().contains("OpenAPI file not found"));
    }

    @Test
    void testLoadExistingSpecWithValidYaml() throws IOException {
        // Create a valid OpenAPI YAML file
        String yamlContent = "openapi: 3.1.1\n" +
            "info:\n" +
            "  title: Test API\n" +
            "  version: 1.2.3\n" +
            "  description: Test description\n" +
            "components:\n" +
            "  schemas:\n" +
            "    TestObject:\n" +
            "      type: object\n" +
            "      description: Test object\n" +
            "      properties:\n" +
            "        id:\n" +
            "          type: integer\n" +
            "          description: ID field\n" +
            "        name:\n" +
            "          type: string\n" +
            "          description: Name field\n" +
            "      required:\n" +
            "        - id\n";

        Path yamlFile = tempDir.resolve("test.yaml");
        Files.write(yamlFile, yamlContent.getBytes());

        OpenApiSpec spec = generator.loadExistingSpec(yamlFile.toString());

        assertNotNull(spec);
        assertEquals("3.1.1", spec.getOpenapi());
        assertEquals("Test API", spec.getInfo().getTitle());
        assertEquals("1.2.3", spec.getInfo().getVersion());
        assertEquals("Test description", spec.getInfo().getDescription());

        assertTrue(spec.getComponents().containsKey("TestObject"));
        OpenApiSpec.Schema schema = spec.getComponents().get("TestObject");
        assertEquals("object", schema.getType());
        assertEquals("Test object", schema.getDescription());
        assertNotNull(schema.getProperties());
        assertTrue(schema.getProperties().containsKey("id"));
        assertTrue(schema.getProperties().containsKey("name"));
    }

    @Test
    void testLoadExistingSpecWithInvalidYaml() throws IOException {
        // Create an invalid YAML file
        String invalidYaml = "invalid: yaml: content: [unclosed";
        Path yamlFile = tempDir.resolve("invalid.yaml");
        Files.write(yamlFile, invalidYaml.getBytes());

        IOException exception = assertThrows(IOException.class, () -> {
            generator.loadExistingSpec(yamlFile.toString());
        });

        assertTrue(exception.getMessage().contains("Failed to parse OpenAPI file"));
    }

    @Test
    void testGenerateSchemaWithEmptyProperties() {
        List<OpenApiProperty> emptyProperties = Arrays.asList();

        OpenApiSpec spec = generator.generateOrAmendSpec(emptyProperties, null);

        assertNotNull(spec);
        assertTrue(spec.getComponents().containsKey("GeneratedObject"));
        
        OpenApiSpec.Schema schema = spec.getComponents().get("GeneratedObject");
        assertEquals("object", schema.getType());
        assertNotNull(schema.getProperties());
        assertTrue(schema.getProperties().isEmpty());
    }

    @Test
    void testGenerateSchemaWithAllPropertyTypes() {
        List<OpenApiProperty> properties = Arrays.asList(
            OpenApiProperty.builder("stringProp", "string").build(),
            OpenApiProperty.builder("integerProp", "integer").build(),
            OpenApiProperty.builder("numberProp", "number").build(),
            OpenApiProperty.builder("booleanProp", "boolean").build(),
            OpenApiProperty.builder("arrayProp", "array").build(),
            OpenApiProperty.builder("objectProp", "object").build()
        );

        OpenApiSpec spec = generator.generateOrAmendSpec(properties, null);
        OpenApiSpec.Schema schema = spec.getComponents().get("GeneratedObject");

        assertEquals(6, schema.getProperties().size());
        
        @SuppressWarnings("unchecked")
        Map<String, Object> stringProp = (Map<String, Object>) schema.getProperties().get("stringProp");
        assertEquals("string", stringProp.get("type"));
        
        @SuppressWarnings("unchecked")
        Map<String, Object> integerProp = (Map<String, Object>) schema.getProperties().get("integerProp");
        assertEquals("integer", integerProp.get("type"));
        
        @SuppressWarnings("unchecked")
        Map<String, Object> booleanProp = (Map<String, Object>) schema.getProperties().get("booleanProp");
        assertEquals("boolean", booleanProp.get("type"));
    }

    @Test
    void testWriteSpecToFileIOException() {
        OpenApiSpec spec = generator.createNewSpec();
        
        // Try to write to an invalid path (directory that doesn't exist)
        String invalidPath = "/nonexistent/directory/file.yaml";
        
        IOException exception = assertThrows(IOException.class, () -> {
            generator.writeSpecToFile(spec, invalidPath);
        });
        
        assertTrue(exception.getMessage().contains("Failed to write OpenAPI file"));
    }
}