package com.apiweaver;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.dataformat.yaml.YAMLFactory;
import com.fasterxml.jackson.dataformat.yaml.YAMLGenerator;

import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * Implementation of OpenApiGenerator that creates OpenAPI 3.1.1 compliant specifications.
 * Uses Jackson for YAML processing and supports both creating new specs and amending existing ones.
 */
public class OpenApi31Generator implements OpenApiGenerator {
    
    private final ObjectMapper yamlMapper;
    
    public OpenApi31Generator() {
        YAMLFactory yamlFactory = new YAMLFactory()
            .disable(YAMLGenerator.Feature.WRITE_DOC_START_MARKER)
            .enable(YAMLGenerator.Feature.MINIMIZE_QUOTES)
            .enable(YAMLGenerator.Feature.INDENT_ARRAYS_WITH_INDICATOR);
        
        this.yamlMapper = new ObjectMapper(yamlFactory);
    }
    
    @Override
    public OpenApiSpec generateOrAmendSpec(List<OpenApiProperty> properties, OpenApiSpec existing) {
        OpenApiSpec spec = existing != null ? existing : createNewSpec();
        
        // Create a schema for the properties
        OpenApiSpec.Schema schema = createSchemaFromProperties(properties);
        
        // Add the schema to the spec - using a generic name for now
        // In a real implementation, this might be derived from the URL or user input
        spec.addSchema("GeneratedObject", schema);
        
        return spec;
    }
    
    @Override
    public OpenApiSpec createNewSpec() {
        OpenApiSpec spec = new OpenApiSpec();
        
        // Set basic info
        OpenApiSpec.Info info = new OpenApiSpec.Info();
        info.setTitle("Generated API");
        info.setVersion("1.0.0");
        info.setDescription("API specification generated by ApiWeaver");
        spec.setInfo(info);
        
        return spec;
    }
    
    @Override
    public OpenApiSpec loadExistingSpec(String filePath) throws IOException {
        File file = new File(filePath);
        if (!file.exists()) {
            throw new IOException("OpenAPI file not found: " + filePath);
        }
        
        try {
            // Parse the YAML file into a generic structure first
            @SuppressWarnings("unchecked")
            Map<String, Object> yamlData = yamlMapper.readValue(file, Map.class);
            
            // Convert to our OpenApiSpec structure
            return convertMapToOpenApiSpec(yamlData);
        } catch (Exception e) {
            throw new IOException("Failed to parse OpenAPI file: " + filePath, e);
        }
    }
    
    /**
     * Writes an OpenAPI specification to a YAML file.
     * 
     * @param spec the OpenAPI specification to write
     * @param filePath the target file path
     * @throws IOException if the file cannot be written
     */
    public void writeSpecToFile(OpenApiSpec spec, String filePath) throws IOException {
        try {
            // Convert OpenApiSpec to a Map structure that Jackson can serialize properly
            Map<String, Object> specMap = convertOpenApiSpecToMap(spec);
            yamlMapper.writeValue(new File(filePath), specMap);
        } catch (Exception e) {
            throw new IOException("Failed to write OpenAPI file: " + filePath, e);
        }
    }
    
    /**
     * Creates an OpenAPI schema from a list of properties.
     */
    private OpenApiSpec.Schema createSchemaFromProperties(List<OpenApiProperty> properties) {
        OpenApiSpec.Schema schema = new OpenApiSpec.Schema();
        schema.setType("object");
        
        List<String> requiredProperties = new ArrayList<>();
        Map<String, Object> schemaProperties = new HashMap<>();
        
        for (OpenApiProperty property : properties) {
            Map<String, Object> propertyDef = new HashMap<>();
            propertyDef.put("type", property.getType());
            
            if (property.getFormat() != null && !property.getFormat().isEmpty()) {
                propertyDef.put("format", property.getFormat());
            }
            
            if (property.getDescription() != null && !property.getDescription().isEmpty()) {
                propertyDef.put("description", property.getDescription());
            }
            
            if (property.isReadOnly()) {
                propertyDef.put("readOnly", true);
            }
            
            schemaProperties.put(property.getName(), propertyDef);
            
            if (property.isRequired()) {
                requiredProperties.add(property.getName());
            }
        }
        
        schema.setProperties(schemaProperties);
        
        // Set required properties
        if (!requiredProperties.isEmpty()) {
            schema.setRequired(requiredProperties);
        }
        
        return schema;
    }
    
    /**
     * Converts a Map structure (from YAML parsing) to our OpenApiSpec object.
     */
    private OpenApiSpec convertMapToOpenApiSpec(Map<String, Object> yamlData) {
        OpenApiSpec spec = new OpenApiSpec();
        
        // Set OpenAPI version
        if (yamlData.containsKey("openapi")) {
            spec.setOpenapi((String) yamlData.get("openapi"));
        }
        
        // Set info
        if (yamlData.containsKey("info")) {
            @SuppressWarnings("unchecked")
            Map<String, Object> infoMap = (Map<String, Object>) yamlData.get("info");
            OpenApiSpec.Info info = new OpenApiSpec.Info();
            
            if (infoMap.containsKey("title")) {
                info.setTitle((String) infoMap.get("title"));
            }
            if (infoMap.containsKey("version")) {
                info.setVersion((String) infoMap.get("version"));
            }
            if (infoMap.containsKey("description")) {
                info.setDescription((String) infoMap.get("description"));
            }
            
            spec.setInfo(info);
        }
        
        // Set components/schemas
        if (yamlData.containsKey("components")) {
            @SuppressWarnings("unchecked")
            Map<String, Object> componentsMap = (Map<String, Object>) yamlData.get("components");
            
            if (componentsMap.containsKey("schemas")) {
                @SuppressWarnings("unchecked")
                Map<String, Object> schemasMap = (Map<String, Object>) componentsMap.get("schemas");
                
                Map<String, OpenApiSpec.Schema> schemas = new HashMap<>();
                for (Map.Entry<String, Object> entry : schemasMap.entrySet()) {
                    @SuppressWarnings("unchecked")
                    Map<String, Object> schemaMap = (Map<String, Object>) entry.getValue();
                    OpenApiSpec.Schema schema = convertMapToSchema(schemaMap);
                    schemas.put(entry.getKey(), schema);
                }
                
                spec.setComponents(schemas);
            }
        }
        
        return spec;
    }
    
    /**
     * Converts a Map to a Schema object.
     */
    private OpenApiSpec.Schema convertMapToSchema(Map<String, Object> schemaMap) {
        OpenApiSpec.Schema schema = new OpenApiSpec.Schema();
        
        if (schemaMap.containsKey("type")) {
            schema.setType((String) schemaMap.get("type"));
        }
        
        if (schemaMap.containsKey("description")) {
            schema.setDescription((String) schemaMap.get("description"));
        }
        
        if (schemaMap.containsKey("properties")) {
            @SuppressWarnings("unchecked")
            Map<String, Object> properties = (Map<String, Object>) schemaMap.get("properties");
            schema.setProperties(properties);
        }
        
        if (schemaMap.containsKey("required")) {
            @SuppressWarnings("unchecked")
            List<String> required = (List<String>) schemaMap.get("required");
            schema.setRequired(required);
        }
        
        // Handle other schema properties
        for (Map.Entry<String, Object> entry : schemaMap.entrySet()) {
            String key = entry.getKey();
            if (!key.equals("type") && !key.equals("description") && !key.equals("properties") && !key.equals("required")) {
                schema.addProperty(key, entry.getValue());
            }
        }
        
        return schema;
    }
    
    /**
     * Converts our OpenApiSpec object to a Map structure for YAML serialization.
     */
    private Map<String, Object> convertOpenApiSpecToMap(OpenApiSpec spec) {
        Map<String, Object> specMap = new HashMap<>();
        
        specMap.put("openapi", spec.getOpenapi());
        
        // Convert info
        if (spec.getInfo() != null) {
            Map<String, Object> infoMap = new HashMap<>();
            infoMap.put("title", spec.getInfo().getTitle());
            infoMap.put("version", spec.getInfo().getVersion());
            infoMap.put("description", spec.getInfo().getDescription());
            specMap.put("info", infoMap);
        }
        
        // Convert components
        if (spec.getComponents() != null && !spec.getComponents().isEmpty()) {
            Map<String, Object> componentsMap = new HashMap<>();
            Map<String, Object> schemasMap = new HashMap<>();
            
            for (Map.Entry<String, OpenApiSpec.Schema> entry : spec.getComponents().entrySet()) {
                schemasMap.put(entry.getKey(), convertSchemaToMap(entry.getValue()));
            }
            
            componentsMap.put("schemas", schemasMap);
            specMap.put("components", componentsMap);
        }
        
        return specMap;
    }
    
    /**
     * Converts a Schema object to a Map for YAML serialization.
     */
    private Map<String, Object> convertSchemaToMap(OpenApiSpec.Schema schema) {
        Map<String, Object> schemaMap = new HashMap<>();
        
        if (schema.getType() != null) {
            schemaMap.put("type", schema.getType());
        }
        
        if (schema.getDescription() != null) {
            schemaMap.put("description", schema.getDescription());
        }
        
        if (schema.getProperties() != null) {
            schemaMap.put("properties", schema.getProperties());
        }
        
        if (schema.getRequired() != null && !schema.getRequired().isEmpty()) {
            schemaMap.put("required", schema.getRequired());
        }
        
        return schemaMap;
    }
}