package com.apiweaver;

import java.util.HashMap;
import java.util.Map;
import java.util.Objects;

/**
 * Represents an OpenAPI 3.1.1 specification structure.
 * Contains the basic structure needed for generating OpenAPI documents.
 */
public class OpenApiSpec {
    private String openapi = "3.1.1";
    private Info info;
    private Map<String, Schema> components;

    public OpenApiSpec() {
        this.components = new HashMap<>();
        this.info = new Info();
    }

    public String getOpenapi() {
        return openapi;
    }

    public void setOpenapi(String openapi) {
        this.openapi = openapi;
    }

    public Info getInfo() {
        return info;
    }

    public void setInfo(Info info) {
        this.info = info;
    }

    public Map<String, Schema> getComponents() {
        return components;
    }

    public void setComponents(Map<String, Schema> components) {
        this.components = components != null ? components : new HashMap<>();
    }

    /**
     * Adds or updates a schema in the components section.
     * 
     * @param name the schema name
     * @param schema the schema definition
     */
    public void addSchema(String name, Schema schema) {
        if (components == null) {
            components = new HashMap<>();
        }
        components.put(name, schema);
    }

    /**
     * Basic Info class for OpenAPI specification metadata.
     */
    public static class Info {
        private String title = "Generated API";
        private String version = "1.0.0";
        private String description = "API specification generated by ApiWeaver";

        public String getTitle() {
            return title;
        }

        public void setTitle(String title) {
            this.title = title;
        }

        public String getVersion() {
            return version;
        }

        public void setVersion(String version) {
            this.version = version;
        }

        public String getDescription() {
            return description;
        }

        public void setDescription(String description) {
            this.description = description;
        }

        @Override
        public boolean equals(Object o) {
            if (this == o) return true;
            if (o == null || getClass() != o.getClass()) return false;
            Info info = (Info) o;
            return Objects.equals(title, info.title) &&
                   Objects.equals(version, info.version) &&
                   Objects.equals(description, info.description);
        }

        @Override
        public int hashCode() {
            return Objects.hash(title, version, description);
        }
    }

    /**
     * Basic Schema class for OpenAPI schema definitions.
     */
    public static class Schema {
        private String type;
        private Map<String, Object> properties;
        private String description;

        public Schema() {
            this.properties = new HashMap<>();
        }

        public String getType() {
            return type;
        }

        public void setType(String type) {
            this.type = type;
        }

        public Map<String, Object> getProperties() {
            return properties;
        }

        public void setProperties(Map<String, Object> properties) {
            this.properties = properties != null ? properties : new HashMap<>();
        }

        public String getDescription() {
            return description;
        }

        public void setDescription(String description) {
            this.description = description;
        }

        /**
         * Adds a property to this schema.
         * 
         * @param name the property name
         * @param property the property definition
         */
        public void addProperty(String name, Object property) {
            if (properties == null) {
                properties = new HashMap<>();
            }
            properties.put(name, property);
        }

        @Override
        public boolean equals(Object o) {
            if (this == o) return true;
            if (o == null || getClass() != o.getClass()) return false;
            Schema schema = (Schema) o;
            return Objects.equals(type, schema.type) &&
                   Objects.equals(properties, schema.properties) &&
                   Objects.equals(description, schema.description);
        }

        @Override
        public int hashCode() {
            return Objects.hash(type, properties, description);
        }
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (o == null || getClass() != o.getClass()) return false;
        OpenApiSpec that = (OpenApiSpec) o;
        return Objects.equals(openapi, that.openapi) &&
               Objects.equals(info, that.info) &&
               Objects.equals(components, that.components);
    }

    @Override
    public int hashCode() {
        return Objects.hash(openapi, info, components);
    }

    @Override
    public String toString() {
        return "OpenApiSpec{" +
               "openapi='" + openapi + '\'' +
               ", info=" + info +
               ", components=" + components +
               '}';
    }
}